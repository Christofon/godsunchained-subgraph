// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class CardCreated extends EthereumEvent {
  get params(): CardCreated__Params {
    return new CardCreated__Params(this);
  }
}

export class CardCreated__Params {
  _event: CardCreated;

  constructor(event: CardCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proto(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get purity(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Transfer extends EthereumEvent {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends EthereumEvent {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends EthereumEvent {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class NewProtoCard extends EthereumEvent {
  get params(): NewProtoCard__Params {
    return new NewProtoCard__Params(this);
  }
}

export class NewProtoCard__Params {
  _event: NewProtoCard;

  constructor(event: NewProtoCard) {
    this._event = event;
  }

  get id(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get season(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get god(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get rarity(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get mana(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get attack(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get health(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get cardType(): i32 {
    return this._event.parameters[7].value.toI32();
  }

  get tribe(): i32 {
    return this._event.parameters[8].value.toI32();
  }

  get packable(): boolean {
    return this._event.parameters[9].value.toBoolean();
  }
}

export class Pause extends EthereumEvent {
  get params(): Pause__Params {
    return new Pause__Params(this);
  }
}

export class Pause__Params {
  _event: Pause;

  constructor(event: Pause) {
    this._event = event;
  }
}

export class Unpause extends EthereumEvent {
  get params(): Unpause__Params {
    return new Unpause__Params(this);
  }
}

export class Unpause__Params {
  _event: Unpause;

  constructor(event: Unpause) {
    this._event = event;
  }
}

export class Contract__getProtoResult {
  value0: boolean;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: i32;
  value6: i32;
  value7: i32;
  value8: i32;

  constructor(
    value0: boolean,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: i32,
    value6: i32,
    value7: i32,
    value8: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromBoolean(this.value0));
    map.set(
      "value1",
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set(
      "value6",
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    map.set(
      "value7",
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    map.set(
      "value8",
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(this.value8))
    );
    return map;
  }
}

export class Contract__cardsResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set(
      "value0",
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }
}

export class Contract__getCardResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set(
      "value0",
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }
}

export class Contract__getLimitResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromBoolean(this.value1));
    return map;
  }
}

export class Contract__limitsResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromBoolean(this.value1));
    return map;
  }
}

export class Contract extends SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  supportsInterface(_interfaceId: Bytes): boolean {
    let result = super.call("supportsInterface", [
      EthereumValue.fromFixedBytes(_interfaceId)
    ]);

    return result[0].toBoolean();
  }

  try_supportsInterface(_interfaceId: Bytes): CallResult<boolean> {
    let result = super.tryCall("supportsInterface", [
      EthereumValue.fromFixedBytes(_interfaceId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getProto(id: i32): Contract__getProtoResult {
    let result = super.call("getProto", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(id))
    ]);

    return new Contract__getProtoResult(
      result[0].toBoolean(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toI32(),
      result[7].toI32(),
      result[8].toI32()
    );
  }

  try_getProto(id: i32): CallResult<Contract__getProtoResult> {
    let result = super.tryCall("getProto", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(id))
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Contract__getProtoResult(
        value[0].toBoolean(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toI32(),
        value[7].toI32(),
        value[8].toI32()
      )
    );
  }

  name(): string {
    let result = super.call("name", []);

    return result[0].toString();
  }

  try_name(): CallResult<string> {
    let result = super.tryCall("name", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  getApproved(_tokenId: BigInt): Address {
    let result = super.call("getApproved", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(_tokenId: BigInt): CallResult<Address> {
    let result = super.tryCall("getApproved", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  governor(): Address {
    let result = super.call("governor", []);

    return result[0].toAddress();
  }

  try_governor(): CallResult<Address> {
    let result = super.tryCall("governor", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  migrated(param0: BigInt): boolean {
    let result = super.call("migrated", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_migrated(param0: BigInt): CallResult<boolean> {
    let result = super.tryCall("migrated", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): CallResult<BigInt> {
    let result = super.tryCall("totalSupply", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  InterfaceId_ERC165(): Bytes {
    let result = super.call("InterfaceId_ERC165", []);

    return result[0].toBytes();
  }

  try_InterfaceId_ERC165(): CallResult<Bytes> {
    let result = super.tryCall("InterfaceId_ERC165", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  addSpell(
    externalID: i32,
    god: i32,
    rarity: i32,
    mana: i32,
    packable: boolean
  ): i32 {
    let result = super.call("addSpell", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(externalID)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(god)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(rarity)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(mana)),
      EthereumValue.fromBoolean(packable)
    ]);

    return result[0].toI32();
  }

  try_addSpell(
    externalID: i32,
    god: i32,
    rarity: i32,
    mana: i32,
    packable: boolean
  ): CallResult<i32> {
    let result = super.tryCall("addSpell", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(externalID)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(god)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(rarity)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(mana)),
      EthereumValue.fromBoolean(packable)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  tokenOfOwnerByIndex(_owner: Address, _index: BigInt): BigInt {
    let result = super.call("tokenOfOwnerByIndex", [
      EthereumValue.fromAddress(_owner),
      EthereumValue.fromUnsignedBigInt(_index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(_owner: Address, _index: BigInt): CallResult<BigInt> {
    let result = super.tryCall("tokenOfOwnerByIndex", [
      EthereumValue.fromAddress(_owner),
      EthereumValue.fromUnsignedBigInt(_index)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  common(param0: BigInt): i32 {
    let result = super.call("common", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toI32();
  }

  try_common(param0: BigInt): CallResult<i32> {
    let result = super.tryCall("common", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  getActiveCards(): BigInt {
    let result = super.call("getActiveCards", []);

    return result[0].toBigInt();
  }

  try_getActiveCards(): CallResult<BigInt> {
    let result = super.tryCall("getActiveCards", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  mythic(param0: BigInt): i32 {
    let result = super.call("mythic", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toI32();
  }

  try_mythic(param0: BigInt): CallResult<i32> {
    let result = super.tryCall("mythic", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  exists(_tokenId: BigInt): boolean {
    let result = super.call("exists", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_exists(_tokenId: BigInt): CallResult<boolean> {
    let result = super.tryCall("exists", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  tokenByIndex(_index: BigInt): BigInt {
    let result = super.call("tokenByIndex", [
      EthereumValue.fromUnsignedBigInt(_index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(_index: BigInt): CallResult<BigInt> {
    let result = super.tryCall("tokenByIndex", [
      EthereumValue.fromUnsignedBigInt(_index)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  burnCount(): BigInt {
    let result = super.call("burnCount", []);

    return result[0].toBigInt();
  }

  try_burnCount(): CallResult<BigInt> {
    let result = super.tryCall("burnCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  seasonTradabilityLocked(param0: i32): boolean {
    let result = super.call("seasonTradabilityLocked", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);

    return result[0].toBoolean();
  }

  try_seasonTradabilityLocked(param0: i32): CallResult<boolean> {
    let result = super.tryCall("seasonTradabilityLocked", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  paused(): boolean {
    let result = super.call("paused", []);

    return result[0].toBoolean();
  }

  try_paused(): CallResult<boolean> {
    let result = super.tryCall("paused", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  ownerOf(_tokenId: BigInt): Address {
    let result = super.call("ownerOf", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(_tokenId: BigInt): CallResult<Address> {
    let result = super.tryCall("ownerOf", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", [EthereumValue.fromAddress(_owner)]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): CallResult<BigInt> {
    let result = super.tryCall("balanceOf", [
      EthereumValue.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  seasonTradable(param0: i32): boolean {
    let result = super.call("seasonTradable", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);

    return result[0].toBoolean();
  }

  try_seasonTradable(param0: i32): CallResult<boolean> {
    let result = super.tryCall("seasonTradable", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  owns(proposed: Address, id: BigInt): boolean {
    let result = super.call("owns", [
      EthereumValue.fromAddress(proposed),
      EthereumValue.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_owns(proposed: Address, id: BigInt): CallResult<boolean> {
    let result = super.tryCall("owns", [
      EthereumValue.fromAddress(proposed),
      EthereumValue.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getShine(purity: i32): i32 {
    let result = super.call("getShine", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(purity))
    ]);

    return result[0].toI32();
  }

  try_getShine(purity: i32): CallResult<i32> {
    let result = super.tryCall("getShine", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(purity))
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  cards(param0: BigInt): Contract__cardsResult {
    let result = super.call("cards", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new Contract__cardsResult(result[0].toI32(), result[1].toI32());
  }

  try_cards(param0: BigInt): CallResult<Contract__cardsResult> {
    let result = super.tryCall("cards", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Contract__cardsResult(value[0].toI32(), value[1].toI32())
    );
  }

  getCard(id: BigInt): Contract__getCardResult {
    let result = super.call("getCard", [EthereumValue.fromUnsignedBigInt(id)]);

    return new Contract__getCardResult(result[0].toI32(), result[1].toI32());
  }

  try_getCard(id: BigInt): CallResult<Contract__getCardResult> {
    let result = super.tryCall("getCard", [
      EthereumValue.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Contract__getCardResult(value[0].toI32(), value[1].toI32())
    );
  }

  getLimit(id: i32): Contract__getLimitResult {
    let result = super.call("getLimit", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(id))
    ]);

    return new Contract__getLimitResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_getLimit(id: i32): CallResult<Contract__getLimitResult> {
    let result = super.tryCall("getLimit", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(id))
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Contract__getLimitResult(value[0].toBigInt(), value[1].toBoolean())
    );
  }

  symbol(): string {
    let result = super.call("symbol", []);

    return result[0].toString();
  }

  try_symbol(): CallResult<string> {
    let result = super.tryCall("symbol", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  limits(param0: i32): Contract__limitsResult {
    let result = super.call("limits", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);

    return new Contract__limitsResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_limits(param0: i32): CallResult<Contract__limitsResult> {
    let result = super.tryCall("limits", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Contract__limitsResult(value[0].toBigInt(), value[1].toBoolean())
    );
  }

  NAME(): string {
    let result = super.call("NAME", []);

    return result[0].toString();
  }

  try_NAME(): CallResult<string> {
    let result = super.tryCall("NAME", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  rare(param0: BigInt): i32 {
    let result = super.call("rare", [EthereumValue.fromUnsignedBigInt(param0)]);

    return result[0].toI32();
  }

  try_rare(param0: BigInt): CallResult<i32> {
    let result = super.tryCall("rare", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  isTradable(proto: i32): boolean {
    let result = super.call("isTradable", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(proto))
    ]);

    return result[0].toBoolean();
  }

  try_isTradable(proto: i32): CallResult<boolean> {
    let result = super.tryCall("isTradable", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(proto))
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  ownsAll(proposed: Address, ids: Array<BigInt>): boolean {
    let result = super.call("ownsAll", [
      EthereumValue.fromAddress(proposed),
      EthereumValue.fromUnsignedBigIntArray(ids)
    ]);

    return result[0].toBoolean();
  }

  try_ownsAll(proposed: Address, ids: Array<BigInt>): CallResult<boolean> {
    let result = super.tryCall("ownsAll", [
      EthereumValue.fromAddress(proposed),
      EthereumValue.fromUnsignedBigIntArray(ids)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  tokenMetadataBaseURI(): string {
    let result = super.call("tokenMetadataBaseURI", []);

    return result[0].toString();
  }

  try_tokenMetadataBaseURI(): CallResult<string> {
    let result = super.tryCall("tokenMetadataBaseURI", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  packs(param0: BigInt): Address {
    let result = super.call("packs", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_packs(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("packs", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  currentSeason(): i32 {
    let result = super.call("currentSeason", []);

    return result[0].toI32();
  }

  try_currentSeason(): CallResult<i32> {
    let result = super.tryCall("currentSeason", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): CallResult<string> {
    let result = super.tryCall("tokenURI", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  getRandomCard(rarity: i32, random: i32): i32 {
    let result = super.call("getRandomCard", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(rarity)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(random))
    ]);

    return result[0].toI32();
  }

  try_getRandomCard(rarity: i32, random: i32): CallResult<i32> {
    let result = super.tryCall("getRandomCard", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(rarity)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(random))
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  addWeapon(
    externalID: i32,
    god: i32,
    rarity: i32,
    mana: i32,
    attack: i32,
    durability: i32,
    packable: boolean
  ): i32 {
    let result = super.call("addWeapon", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(externalID)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(god)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(rarity)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(mana)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(attack)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(durability)),
      EthereumValue.fromBoolean(packable)
    ]);

    return result[0].toI32();
  }

  try_addWeapon(
    externalID: i32,
    god: i32,
    rarity: i32,
    mana: i32,
    attack: i32,
    durability: i32,
    packable: boolean
  ): CallResult<i32> {
    let result = super.tryCall("addWeapon", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(externalID)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(god)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(rarity)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(mana)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(attack)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(durability)),
      EthereumValue.fromBoolean(packable)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  addProto(
    externalID: i32,
    god: i32,
    rarity: i32,
    mana: i32,
    attack: i32,
    health: i32,
    cardType: i32,
    tribe: i32,
    packable: boolean
  ): i32 {
    let result = super.call("addProto", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(externalID)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(god)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(rarity)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(mana)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(attack)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(health)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(cardType)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(tribe)),
      EthereumValue.fromBoolean(packable)
    ]);

    return result[0].toI32();
  }

  try_addProto(
    externalID: i32,
    god: i32,
    rarity: i32,
    mana: i32,
    attack: i32,
    health: i32,
    cardType: i32,
    tribe: i32,
    packable: boolean
  ): CallResult<i32> {
    let result = super.tryCall("addProto", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(externalID)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(god)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(rarity)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(mana)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(attack)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(health)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(cardType)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(tribe)),
      EthereumValue.fromBoolean(packable)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  protoCount(): i32 {
    let result = super.call("protoCount", []);

    return result[0].toI32();
  }

  try_protoCount(): CallResult<i32> {
    let result = super.tryCall("protoCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  epic(param0: BigInt): i32 {
    let result = super.call("epic", [EthereumValue.fromUnsignedBigInt(param0)]);

    return result[0].toI32();
  }

  try_epic(param0: BigInt): CallResult<i32> {
    let result = super.tryCall("epic", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  addMinion(
    externalID: i32,
    god: i32,
    rarity: i32,
    mana: i32,
    attack: i32,
    health: i32,
    tribe: i32,
    packable: boolean
  ): i32 {
    let result = super.call("addMinion", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(externalID)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(god)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(rarity)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(mana)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(attack)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(health)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(tribe)),
      EthereumValue.fromBoolean(packable)
    ]);

    return result[0].toI32();
  }

  try_addMinion(
    externalID: i32,
    god: i32,
    rarity: i32,
    mana: i32,
    attack: i32,
    health: i32,
    tribe: i32,
    packable: boolean
  ): CallResult<i32> {
    let result = super.tryCall("addMinion", [
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(externalID)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(god)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(rarity)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(mana)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(attack)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(health)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(tribe)),
      EthereumValue.fromBoolean(packable)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  addProtos(
    externalIDs: Array<i32>,
    gods: Array<i32>,
    rarities: Array<i32>,
    manas: Array<i32>,
    attacks: Array<i32>,
    healths: Array<i32>,
    cardTypes: Array<i32>,
    tribes: Array<i32>,
    packable: Array<boolean>
  ): i32 {
    let result = super.call("addProtos", [
      EthereumValue.fromI32Array(externalIDs),
      EthereumValue.fromI32Array(gods),
      EthereumValue.fromI32Array(rarities),
      EthereumValue.fromI32Array(manas),
      EthereumValue.fromI32Array(attacks),
      EthereumValue.fromI32Array(healths),
      EthereumValue.fromI32Array(cardTypes),
      EthereumValue.fromI32Array(tribes),
      EthereumValue.fromBooleanArray(packable)
    ]);

    return result[0].toI32();
  }

  try_addProtos(
    externalIDs: Array<i32>,
    gods: Array<i32>,
    rarities: Array<i32>,
    manas: Array<i32>,
    attacks: Array<i32>,
    healths: Array<i32>,
    cardTypes: Array<i32>,
    tribes: Array<i32>,
    packable: Array<boolean>
  ): CallResult<i32> {
    let result = super.tryCall("addProtos", [
      EthereumValue.fromI32Array(externalIDs),
      EthereumValue.fromI32Array(gods),
      EthereumValue.fromI32Array(rarities),
      EthereumValue.fromI32Array(manas),
      EthereumValue.fromI32Array(attacks),
      EthereumValue.fromI32Array(healths),
      EthereumValue.fromI32Array(cardTypes),
      EthereumValue.fromI32Array(tribes),
      EthereumValue.fromBooleanArray(packable)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  getBurnCount(): BigInt {
    let result = super.call("getBurnCount", []);

    return result[0].toBigInt();
  }

  try_getBurnCount(): CallResult<BigInt> {
    let result = super.tryCall("getBurnCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(_owner: Address, _operator: Address): boolean {
    let result = super.call("isApprovedForAll", [
      EthereumValue.fromAddress(_owner),
      EthereumValue.fromAddress(_operator)
    ]);

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    _owner: Address,
    _operator: Address
  ): CallResult<boolean> {
    let result = super.tryCall("isApprovedForAll", [
      EthereumValue.fromAddress(_owner),
      EthereumValue.fromAddress(_operator)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  legendary(param0: BigInt): i32 {
    let result = super.call("legendary", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toI32();
  }

  try_legendary(param0: BigInt): CallResult<i32> {
    let result = super.tryCall("legendary", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  SYMBOL(): string {
    let result = super.call("SYMBOL", []);

    return result[0].toString();
  }

  try_SYMBOL(): CallResult<string> {
    let result = super.tryCall("SYMBOL", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  createCard(owner: Address, proto: i32, purity: i32): BigInt {
    let result = super.call("createCard", [
      EthereumValue.fromAddress(owner),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(proto)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(purity))
    ]);

    return result[0].toBigInt();
  }

  try_createCard(owner: Address, proto: i32, purity: i32): CallResult<BigInt> {
    let result = super.tryCall("createCard", [
      EthereumValue.fromAddress(owner),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(proto)),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(purity))
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends EthereumCall {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class TransferAllFromCall extends EthereumCall {
  get inputs(): TransferAllFromCall__Inputs {
    return new TransferAllFromCall__Inputs(this);
  }

  get outputs(): TransferAllFromCall__Outputs {
    return new TransferAllFromCall__Outputs(this);
  }
}

export class TransferAllFromCall__Inputs {
  _call: TransferAllFromCall;

  constructor(call: TransferAllFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class TransferAllFromCall__Outputs {
  _call: TransferAllFromCall;

  constructor(call: TransferAllFromCall) {
    this._call = call;
  }
}

export class BurnAllCall extends EthereumCall {
  get inputs(): BurnAllCall__Inputs {
    return new BurnAllCall__Inputs(this);
  }

  get outputs(): BurnAllCall__Outputs {
    return new BurnAllCall__Outputs(this);
  }
}

export class BurnAllCall__Inputs {
  _call: BurnAllCall;

  constructor(call: BurnAllCall) {
    this._call = call;
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class BurnAllCall__Outputs {
  _call: BurnAllCall;

  constructor(call: BurnAllCall) {
    this._call = call;
  }
}

export class MakePermanantlyTradableCall extends EthereumCall {
  get inputs(): MakePermanantlyTradableCall__Inputs {
    return new MakePermanantlyTradableCall__Inputs(this);
  }

  get outputs(): MakePermanantlyTradableCall__Outputs {
    return new MakePermanantlyTradableCall__Outputs(this);
  }
}

export class MakePermanantlyTradableCall__Inputs {
  _call: MakePermanantlyTradableCall;

  constructor(call: MakePermanantlyTradableCall) {
    this._call = call;
  }

  get season(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class MakePermanantlyTradableCall__Outputs {
  _call: MakePermanantlyTradableCall;

  constructor(call: MakePermanantlyTradableCall) {
    this._call = call;
  }
}

export class TransferFromCall extends EthereumCall {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class AddSpellCall extends EthereumCall {
  get inputs(): AddSpellCall__Inputs {
    return new AddSpellCall__Inputs(this);
  }

  get outputs(): AddSpellCall__Outputs {
    return new AddSpellCall__Outputs(this);
  }
}

export class AddSpellCall__Inputs {
  _call: AddSpellCall;

  constructor(call: AddSpellCall) {
    this._call = call;
  }

  get externalID(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get god(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get rarity(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get mana(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get packable(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class AddSpellCall__Outputs {
  _call: AddSpellCall;

  constructor(call: AddSpellCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class UnpauseCall extends EthereumCall {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends EthereumCall {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class BurnCall extends EthereumCall {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class MigrateCall extends EthereumCall {
  get inputs(): MigrateCall__Inputs {
    return new MigrateCall__Inputs(this);
  }

  get outputs(): MigrateCall__Outputs {
    return new MigrateCall__Outputs(this);
  }
}

export class MigrateCall__Inputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MigrateCall__Outputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }
}

export class ReplaceProtoCall extends EthereumCall {
  get inputs(): ReplaceProtoCall__Inputs {
    return new ReplaceProtoCall__Inputs(this);
  }

  get outputs(): ReplaceProtoCall__Outputs {
    return new ReplaceProtoCall__Outputs(this);
  }
}

export class ReplaceProtoCall__Inputs {
  _call: ReplaceProtoCall;

  constructor(call: ReplaceProtoCall) {
    this._call = call;
  }

  get index(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get god(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get cardType(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get mana(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get attack(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get health(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get tribe(): i32 {
    return this._call.inputValues[6].value.toI32();
  }
}

export class ReplaceProtoCall__Outputs {
  _call: ReplaceProtoCall;

  constructor(call: ReplaceProtoCall) {
    this._call = call;
  }
}

export class SetLimitCall extends EthereumCall {
  get inputs(): SetLimitCall__Inputs {
    return new SetLimitCall__Inputs(this);
  }

  get outputs(): SetLimitCall__Outputs {
    return new SetLimitCall__Outputs(this);
  }
}

export class SetLimitCall__Inputs {
  _call: SetLimitCall;

  constructor(call: SetLimitCall) {
    this._call = call;
  }

  get id(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get limit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetLimitCall__Outputs {
  _call: SetLimitCall;

  constructor(call: SetLimitCall) {
    this._call = call;
  }
}

export class TransferAllCall extends EthereumCall {
  get inputs(): TransferAllCall__Inputs {
    return new TransferAllCall__Inputs(this);
  }

  get outputs(): TransferAllCall__Outputs {
    return new TransferAllCall__Outputs(this);
  }
}

export class TransferAllCall__Inputs {
  _call: TransferAllCall;

  constructor(call: TransferAllCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class TransferAllCall__Outputs {
  _call: TransferAllCall;

  constructor(call: TransferAllCall) {
    this._call = call;
  }
}

export class AddPackCall extends EthereumCall {
  get inputs(): AddPackCall__Inputs {
    return new AddPackCall__Inputs(this);
  }

  get outputs(): AddPackCall__Outputs {
    return new AddPackCall__Outputs(this);
  }
}

export class AddPackCall__Inputs {
  _call: AddPackCall;

  constructor(call: AddPackCall) {
    this._call = call;
  }

  get approved(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddPackCall__Outputs {
  _call: AddPackCall;

  constructor(call: AddPackCall) {
    this._call = call;
  }
}

export class PauseCall extends EthereumCall {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class MigrateAllCall extends EthereumCall {
  get inputs(): MigrateAllCall__Inputs {
    return new MigrateAllCall__Inputs(this);
  }

  get outputs(): MigrateAllCall__Outputs {
    return new MigrateAllCall__Outputs(this);
  }
}

export class MigrateAllCall__Inputs {
  _call: MigrateAllCall;

  constructor(call: MigrateAllCall) {
    this._call = call;
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class MigrateAllCall__Outputs {
  _call: MigrateAllCall;

  constructor(call: MigrateAllCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends EthereumCall {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferCall extends EthereumCall {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends EthereumCall {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class NextSeasonCall extends EthereumCall {
  get inputs(): NextSeasonCall__Inputs {
    return new NextSeasonCall__Inputs(this);
  }

  get outputs(): NextSeasonCall__Outputs {
    return new NextSeasonCall__Outputs(this);
  }
}

export class NextSeasonCall__Inputs {
  _call: NextSeasonCall;

  constructor(call: NextSeasonCall) {
    this._call = call;
  }
}

export class NextSeasonCall__Outputs {
  _call: NextSeasonCall;

  constructor(call: NextSeasonCall) {
    this._call = call;
  }
}

export class SetGovernorCall extends EthereumCall {
  get inputs(): SetGovernorCall__Inputs {
    return new SetGovernorCall__Inputs(this);
  }

  get outputs(): SetGovernorCall__Outputs {
    return new SetGovernorCall__Outputs(this);
  }
}

export class SetGovernorCall__Inputs {
  _call: SetGovernorCall;

  constructor(call: SetGovernorCall) {
    this._call = call;
  }

  get _gov(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovernorCall__Outputs {
  _call: SetGovernorCall;

  constructor(call: SetGovernorCall) {
    this._call = call;
  }
}

export class MakeUntradableCall extends EthereumCall {
  get inputs(): MakeUntradableCall__Inputs {
    return new MakeUntradableCall__Inputs(this);
  }

  get outputs(): MakeUntradableCall__Outputs {
    return new MakeUntradableCall__Outputs(this);
  }
}

export class MakeUntradableCall__Inputs {
  _call: MakeUntradableCall;

  constructor(call: MakeUntradableCall) {
    this._call = call;
  }

  get season(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class MakeUntradableCall__Outputs {
  _call: MakeUntradableCall;

  constructor(call: MakeUntradableCall) {
    this._call = call;
  }
}

export class AddWeaponCall extends EthereumCall {
  get inputs(): AddWeaponCall__Inputs {
    return new AddWeaponCall__Inputs(this);
  }

  get outputs(): AddWeaponCall__Outputs {
    return new AddWeaponCall__Outputs(this);
  }
}

export class AddWeaponCall__Inputs {
  _call: AddWeaponCall;

  constructor(call: AddWeaponCall) {
    this._call = call;
  }

  get externalID(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get god(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get rarity(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get mana(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get attack(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get durability(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get packable(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class AddWeaponCall__Outputs {
  _call: AddWeaponCall;

  constructor(call: AddWeaponCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class AddProtoCall extends EthereumCall {
  get inputs(): AddProtoCall__Inputs {
    return new AddProtoCall__Inputs(this);
  }

  get outputs(): AddProtoCall__Outputs {
    return new AddProtoCall__Outputs(this);
  }
}

export class AddProtoCall__Inputs {
  _call: AddProtoCall;

  constructor(call: AddProtoCall) {
    this._call = call;
  }

  get externalID(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get god(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get rarity(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get mana(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get attack(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get health(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get cardType(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get tribe(): i32 {
    return this._call.inputValues[7].value.toI32();
  }

  get packable(): boolean {
    return this._call.inputValues[8].value.toBoolean();
  }
}

export class AddProtoCall__Outputs {
  _call: AddProtoCall;

  constructor(call: AddProtoCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class AddMinionCall extends EthereumCall {
  get inputs(): AddMinionCall__Inputs {
    return new AddMinionCall__Inputs(this);
  }

  get outputs(): AddMinionCall__Outputs {
    return new AddMinionCall__Outputs(this);
  }
}

export class AddMinionCall__Inputs {
  _call: AddMinionCall;

  constructor(call: AddMinionCall) {
    this._call = call;
  }

  get externalID(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get god(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get rarity(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get mana(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get attack(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get health(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get tribe(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get packable(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }
}

export class AddMinionCall__Outputs {
  _call: AddMinionCall;

  constructor(call: AddMinionCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class AddProtosCall extends EthereumCall {
  get inputs(): AddProtosCall__Inputs {
    return new AddProtosCall__Inputs(this);
  }

  get outputs(): AddProtosCall__Outputs {
    return new AddProtosCall__Outputs(this);
  }
}

export class AddProtosCall__Inputs {
  _call: AddProtosCall;

  constructor(call: AddProtosCall) {
    this._call = call;
  }

  get externalIDs(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }

  get gods(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }

  get rarities(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }

  get manas(): Array<i32> {
    return this._call.inputValues[3].value.toI32Array();
  }

  get attacks(): Array<i32> {
    return this._call.inputValues[4].value.toI32Array();
  }

  get healths(): Array<i32> {
    return this._call.inputValues[5].value.toI32Array();
  }

  get cardTypes(): Array<i32> {
    return this._call.inputValues[6].value.toI32Array();
  }

  get tribes(): Array<i32> {
    return this._call.inputValues[7].value.toI32Array();
  }

  get packable(): Array<boolean> {
    return this._call.inputValues[8].value.toBooleanArray();
  }
}

export class AddProtosCall__Outputs {
  _call: AddProtosCall;

  constructor(call: AddProtosCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class ApproveAllCall extends EthereumCall {
  get inputs(): ApproveAllCall__Inputs {
    return new ApproveAllCall__Inputs(this);
  }

  get outputs(): ApproveAllCall__Outputs {
    return new ApproveAllCall__Outputs(this);
  }
}

export class ApproveAllCall__Inputs {
  _call: ApproveAllCall;

  constructor(call: ApproveAllCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ApproveAllCall__Outputs {
  _call: ApproveAllCall;

  constructor(call: ApproveAllCall) {
    this._call = call;
  }
}

export class MakeTradableCall extends EthereumCall {
  get inputs(): MakeTradableCall__Inputs {
    return new MakeTradableCall__Inputs(this);
  }

  get outputs(): MakeTradableCall__Outputs {
    return new MakeTradableCall__Outputs(this);
  }
}

export class MakeTradableCall__Inputs {
  _call: MakeTradableCall;

  constructor(call: MakeTradableCall) {
    this._call = call;
  }

  get season(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class MakeTradableCall__Outputs {
  _call: MakeTradableCall;

  constructor(call: MakeTradableCall) {
    this._call = call;
  }
}

export class CreateCardCall extends EthereumCall {
  get inputs(): CreateCardCall__Inputs {
    return new CreateCardCall__Inputs(this);
  }

  get outputs(): CreateCardCall__Outputs {
    return new CreateCardCall__Outputs(this);
  }
}

export class CreateCardCall__Inputs {
  _call: CreateCardCall;

  constructor(call: CreateCardCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get proto(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get purity(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class CreateCardCall__Outputs {
  _call: CreateCardCall;

  constructor(call: CreateCardCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get previous(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
